import{_ as l,c as i,a as s,b as a,w as e,d as p,r as o,o as c,e as t}from"./app-D8ON31fm.js";const r={},u=p('<p align="center"><img src="https://github.com/abbasudo/laravel-purity/raw/master/art/purity-logo.png" alt="Social Card of Laravel Purity"><h1 align="center">Elegant way to filter and sort queries in Laravel</h1></p><p><a href="https://github.com/abbasudo/laravel-purity/actions/workflows/tests.yml" target="_blank" rel="noopener noreferrer"><img src="https://github.com/abbasudo/laravel-purity/actions/workflows/tests.yml/badge.svg" alt="Tests"></a><a href="https://github.com/abbasudo/laravel-purity" target="_blank" rel="noopener noreferrer"><img src="http://poser.pugx.org/abbasudo/laravel-purity/license" alt="License"></a><a href="https://packagist.org/packages/abbasudo/laravel-purity" target="_blank" rel="noopener noreferrer"><img src="http://poser.pugx.org/abbasudo/laravel-purity/v" alt="Latest Unstable Version"></a><a href="https://packagist.org/packages/abbasudo/laravel-purity" target="_blank" rel="noopener noreferrer"><img src="http://poser.pugx.org/abbasudo/laravel-purity/require/php" alt="PHP Version Require"></a><a href="https://packagist.org/packages/abbasudo/laravel-purity" target="_blank" rel="noopener noreferrer"><img src="https://github.styleci.io/repos/603931433/shield" alt="StyleCI"></a></p><blockquote><p><strong>Note</strong> If you are a front-end developer and want to make queries in an API that uses this package head to the <a href="#queries-and-javascript-examples">queries</a> section</p></blockquote><blockquote><p><strong>Note</strong> Version 3 changed <code>$filterFields</code> read more at <a href="#upgrade-guide">upgrade guide</a> section</p></blockquote><p>Laravel Purity is an elegant and efficient filtering and sorting package for Laravel, designed to simplify complex data filtering and sorting logic for eloquent queries. By simply adding <code>filter()</code> to your Eloquent query, you can add the ability for frontend users to apply filters based on URL query string parameters like a breeze.</p><p>Features :</p><ul><li>Livewire support (added in v2)</li><li>Rename and restrict fields (added in v2)</li><li>Various filter methods</li><li>Simple installation and usage</li><li>Filter by relation columns</li><li>Custom filters</li><li>Multi-column sort</li></ul><p>Laravel Purity is not only developer-friendly but also front-end developer-friendly. Frontend developers can effortlessly use filtering and sorting of the APIs by using the popular <a href="https://www.npmjs.com/package/qs" target="_blank" rel="noopener noreferrer">JavaScript qs</a> package.</p><p>The way this package handles filters is inspired by strapi&#39;s <a href="https://docs.strapi.io/dev-docs/api/rest/filters-locale-publication#filtering" target="_blank" rel="noopener noreferrer">filter</a> and <a href="https://docs.strapi.io/dev-docs/api/rest/sort-pagination#sorting" target="_blank" rel="noopener noreferrer">sort</a> functionality.</p><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents"><span>Table of Contents</span></a></h2>',10),d={class:"table-of-contents"},k=p(`<h2 id="tutorials" tabindex="-1"><a class="header-anchor" href="#tutorials"><span>Tutorials</span></a></h2><h3 id="video" tabindex="-1"><a class="header-anchor" href="#video"><span>Video</span></a></h3><p><a href="https://youtu.be/nvCTEKvRdec" target="_blank" rel="noopener noreferrer"><img src="https://user-images.githubusercontent.com/86796762/227452155-3644f431-a8ce-41bc-ad4b-95383a3209fa.png" alt="youtube"></a></p><h3 id="articles" tabindex="-1"><a class="header-anchor" href="#articles"><span>Articles</span></a></h3><ul><li><a href="https://laravel-news.com/filter-api-responses-with-laravel-purity" target="_blank" rel="noopener noreferrer">Filter API Responses with Laravel Purity</a></li><li><a href="https://medium.com/@ahnabshahin/filter-and-sort-in-laravel-07bbb964f32d" target="_blank" rel="noopener noreferrer">Filter and Sort in Laravel</a></li><li><a href="https://dev.to/giuliano1993/mondev-newsletter-filter-better-with-laravel-purity-55c5" target="_blank" rel="noopener noreferrer">Filter better with Laravel Purity</a></li><li><a href="https://medium.com/@abbasudo/the-correct-way-of-adding-filters-to-laravel-10-bb9957c2ddc6" target="_blank" rel="noopener noreferrer">The correct way of adding filters to Laravel</a></li><li><a href="https://dev.to/abbasudo/add-filter-to-your-laravel-10-app-4f5f" target="_blank" rel="noopener noreferrer">Add filter to your laravel app</a></li><li><a href="https://medium.com/@abbasudo/enable-filtering-in-your-laravel-app-with-ease-a63f79b5e452" target="_blank" rel="noopener noreferrer">Enable filtering queries in your laravel 10 app with ease</a></li></ul><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>Install the package via composer by this command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">composer</span> require abbasudo/laravel-purity </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Get configs (<code>configs/purity.php</code>) file to customize the package&#39;s behavior by this command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">php artisan vendor:publish <span class="token parameter variable">--tag</span><span class="token operator">=</span>purity </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage"><span>Basic Usage</span></a></h2><h3 id="filters" tabindex="-1"><a class="header-anchor" href="#filters"><span>Filters</span></a></h3><p>Add <code>Filterable</code> trait to your model to get filters functionalities.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">use</span> <span class="token package">Abbasudo<span class="token punctuation">\\</span>Purity<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>Filterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token package">Filterable</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now add <code>filter()</code> to your model eloquent query in the controller.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, it gives access to all filters available. here is the list of <a href="#available-filters">available filters</a>. if you want to explicitly specify which filters to use in this call head to <a href="#restrict-filters">restrict filters</a> section.</p><h3 id="sort" tabindex="-1"><a class="header-anchor" href="#sort"><span>Sort</span></a></h3><h4 id="sort-basics" tabindex="-1"><a class="header-anchor" href="#sort-basics"><span>Sort Basics</span></a></h4><p>Add <code>Sortable</code> trait to your model to get sorts functionalities.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">use</span> <span class="token package">Abbasudo<span class="token punctuation">\\</span>Purity<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>Sortable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token package">Sortable</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now add <code>sort()</code> to your eloquent query in the controller.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now sort can be applied as instructed in <a href="#apply-sort">apply sort</a>.</p><h2 id="advanced-usage" tabindex="-1"><a class="header-anchor" href="#advanced-usage"><span>Advanced Usage</span></a></h2><h3 id="allowed-fields" tabindex="-1"><a class="header-anchor" href="#allowed-fields"><span>Allowed Fields</span></a></h3><p>By default, purity allows every database column and all model relations (that have a defined return type) to be filtered.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// App\\Models\\User</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name class-name-fully-qualified return-type">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Relations<span class="token punctuation">\\</span>HasMany</span> <span class="token comment">// This is mandatory</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>you can overwrite the allowed columns as follows:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// App\\Models\\User</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token variable">$filterFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;mobile&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token comment">// relation</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token keyword">protected</span> <span class="token variable">$sortFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;mobile&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>any field other than email, mobile, or posts will be rejected when filtering.</p><h4 id="overwrite-allowed-fields" tabindex="-1"><a class="header-anchor" href="#overwrite-allowed-fields"><span>Overwrite Allowed Fields</span></a></h4><p>to overwrite allowed fields in the controller add <code>filterFields</code> or <code>sortFields</code> before calling filter or sort method.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filterFields</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">sortFields</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;created_at&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;updated_at&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong> filterFields and sortFields will overwrite fields defined in the model.</p></blockquote><h3 id="rename-fields" tabindex="-1"><a class="header-anchor" href="#rename-fields"><span>Rename Fields</span></a></h3><h4 id="rename-filter-fields" tabindex="-1"><a class="header-anchor" href="#rename-filter-fields"><span>Rename Filter Fields</span></a></h4><p>To rename filter fields simply add a value to fields defined in <code>$renamedFilterFields</code>.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// App\\Models\\User</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ?filter[phone][$eq]=0000000000</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token variable">$renamedFilterFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;mobile&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;phone&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Actual database column is mobile</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;posts&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;writing&#39;</span><span class="token punctuation">,</span> <span class="token comment">// actual relation is posts</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The client should send phone in order to filter by mobile column in database.</p><h4 id="rename-sort-fields" tabindex="-1"><a class="header-anchor" href="#rename-sort-fields"><span>Rename Sort Fields</span></a></h4><p>To rename sort fields simply add a value to defined in <code>$sortFields</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// App\\Models\\User</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ?sort=phone</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token variable">$sortFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;mobile&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;phone&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Actual database column is mobile</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The client should send phone in order to sort by mobile column in database.</p><h4 id="overwrite-renamed-fields" tabindex="-1"><a class="header-anchor" href="#overwrite-renamed-fields"><span>Overwrite Renamed Fields</span></a></h4><p>To overwrite renamed fields in the controller you pass renamed fields to <code>rebamedFilterFields</code> and <code>sortFields</code>.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">renamedFilterFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;created_at&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;published_date&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">sortFields</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;created_at&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;published_date&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;updated_at&#39;</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong> SortFields will overwrite fields defined in the model.</p></blockquote><h3 id="restrict-filters" tabindex="-1"><a class="header-anchor" href="#restrict-filters"><span>Restrict Filters</span></a></h3><p>purity validates allowed filters in the following order of priority:</p><ul><li>Filters specified in the <code>filters</code> configuration in the <code>configs/purity.php</code> file.</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// configs/purity.php</span></span>
<span class="line"><span class="token string single-quoted-string">&#39;filters&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token class-name static-context">EqualFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token class-name static-context">InFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Filters declared in the <code>$filters</code> variable in the model.</li></ul><p>note that, $filters will overwrite configs filters.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// App\\Models\\Post</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword type-declaration">array</span> <span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;$eq&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;$in&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line"><span class="token comment">// or</span></span>
<span class="line">    </span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword type-declaration">array</span> <span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token class-name static-context">EqualFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token class-name static-context">InFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Filters passed as an array to the <code>filterBy()</code> function.</li></ul><p>note that, <code>filterBy</code> will overwrite all other defined filters.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filterBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;$eq&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;$in&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// or</span></span>
<span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filterBy</span><span class="token punctuation">(</span><span class="token class-name static-context">EqualFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name static-context">InFilter</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="restrict-filters-by-field" tabindex="-1"><a class="header-anchor" href="#restrict-filters-by-field"><span>Restrict filters by field</span></a></h3><p>There are three available options for your convenience. They take priority respectively.</p><ul><li><strong>Option 1 : Define restricted filters inside <code>$filterFields</code> property, as shown below</strong></li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$filterFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;$eq&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// title will be limited to the eq operator</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;$eq&#39;</span><span class="token punctuation">,</span>    <span class="token comment">// works only for one restricted operator</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;title:$eq&#39;</span><span class="token punctuation">,</span>         <span class="token comment">// same as above</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span>             <span class="token comment">// this won&#39;t be restricted to any operator</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The drawback here is that you have to define all the allowed fields, regardless of any restrictions fields.</p><ul><li><strong>Option 2 : Define them inside <code>$restrictedFilters</code> property</strong></li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$restrictedFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;$eq&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;$eq&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// title will be limited to the eq operator</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;title:$eq,$in&#39;</span>             <span class="token comment">// same as above</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;title&#39;</span>                     <span class="token comment">// this won&#39;t be restricted to any operator</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Option 3 : Finally, you can set it on the Eloquent builder, which takes the highest priority (overwrite all the above options)</strong></li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">restrictedFilters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;$eq&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong></p><blockquote><p>All field-restricted filter operations are respected to filters defined in $filter (<a href="#restrict-filters">here</a>). This means you are not allowed to restrict a field operation that is not permitted in restricted fields.</p></blockquote><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;$eq&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$restrictedFilters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;$eqc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">// This won&#39;t work</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sort-by-relationships" tabindex="-1"><a class="header-anchor" href="#sort-by-relationships"><span>Sort by Relationships</span></a></h4><p>The following relationship types are supported.</p><ul><li>One to One</li><li>One to Many</li><li>Many to Many</li></ul><p>Return type of the relationship mandatory as below in order to sort by relationships.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Relations<span class="token punctuation">\\</span>HasMany</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">use</span> <span class="token package">Sortable</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">tags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">HasMany</span> <span class="token comment">// This is mandatory</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token class-name static-context">Tag</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="changing-params-source" tabindex="-1"><a class="header-anchor" href="#changing-params-source"><span>Changing Params Source</span></a></h3><p>By Default, purity gets params from filters index in query params, overwrite this by passing params directly to filter or sort functions:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;$eq&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;good post&#39;</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;id:desc&#39;</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="livewire" tabindex="-1"><a class="header-anchor" href="#livewire"><span>Livewire</span></a></h3><p>to add filter to your livewire app, first define <code>$filters</code> variable in your component and pass it to filter or sort method:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// component</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Url</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">public</span> <span class="token variable">$filters</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string single-quoted-string">&#39;title&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token variable">$transactions</span> <span class="token operator">=</span> <span class="token class-name static-context">Transaction</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">filters</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;livewire.transaction-table&#39;</span><span class="token punctuation">,</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;transactions&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then bind the variable in your blade template.</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token comment">&lt;!-- in blade template --&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">wire:</span>model.live</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>filters.title.$eq<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>read more in <a href="https://livewire.laravel.com/docs/url" target="_blank" rel="noopener noreferrer">livewire docs</a></p><h3 id="custom-filters" tabindex="-1"><a class="header-anchor" href="#custom-filters"><span>Custom Filters</span></a></h3><p>Create a custom filter class by this command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">php artisan make:filter EqualFilter</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>this will generate a filter class in <code>Filters</code> directory. By default, all classes defined in <code>Filters</code> directory are loaded into the package. you can change scan folder location in purity config file.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// configs/purity.php</span></span>
<span class="line"></span>
<span class="line"><span class="token string single-quoted-string">&#39;custom_filters_location&#39;</span> <span class="token operator">=&gt;</span> <span class="token function">app_path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Filters&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="silent-exceptions" tabindex="-1"><a class="header-anchor" href="#silent-exceptions"><span>Silent Exceptions</span></a></h3><p>By default, purity silences its own exceptions. to change that behavior change the <code>silent</code> index to <code>false</code> in the config file.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// configs/purity.php</span></span>
<span class="line"></span>
<span class="line"><span class="token string single-quoted-string">&#39;silent&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sort-null-values-last" tabindex="-1"><a class="header-anchor" href="#sort-null-values-last"><span>Sort null values last</span></a></h3><p>When sorting a column that contains null values, it&#39;s typically preferred to have those values appear last, regardless of the sorting direction. You can enable this feature in the configuration as follows:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// configs/purity.php</span></span>
<span class="line"></span>
<span class="line">null_last <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="queries-and-javascript-examples" tabindex="-1"><a class="header-anchor" href="#queries-and-javascript-examples"><span>Queries and javascript examples</span></a></h2><p>This section is a guide for front-end developers who want to use an API that uses Laravel Purity.</p><h3 id="available-filters" tabindex="-1"><a class="header-anchor" href="#available-filters"><span>Available Filters</span></a></h3><p>Queries can accept a filters parameter with the following syntax:</p><p><code>GET /api/posts?filters[field][operator]=value</code></p><p><strong>By Default</strong> the following operators are available:</p><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td><code>$eq</code></td><td>Equal</td></tr><tr><td><code>$eqc</code></td><td>Equal (case-sensitive)</td></tr><tr><td><code>$ne</code></td><td>Not equal</td></tr><tr><td><code>$lt</code></td><td>Less than</td></tr><tr><td><code>$lte</code></td><td>Less than or equal to</td></tr><tr><td><code>$gt</code></td><td>Greater than</td></tr><tr><td><code>$gte</code></td><td>Greater than or equal to</td></tr><tr><td><code>$in</code></td><td>Included in an array</td></tr><tr><td><code>$notIn</code></td><td>Not included in an array</td></tr><tr><td><code>$contains</code></td><td>Contains</td></tr><tr><td><code>$notContains</code></td><td>Does not contain</td></tr><tr><td><code>$containsc</code></td><td>Contains (case-sensitive)</td></tr><tr><td><code>$notContainsc</code></td><td>Does not contain (case-sensitive)</td></tr><tr><td><code>$null</code></td><td>Is null</td></tr><tr><td><code>$notNull</code></td><td>Is not null</td></tr><tr><td><code>$between</code></td><td>Is between</td></tr><tr><td><code>$notBetween</code></td><td>Is not between</td></tr><tr><td><code>$startsWith</code></td><td>Starts with</td></tr><tr><td><code>$startsWithc</code></td><td>Starts with (case-sensitive)</td></tr><tr><td><code>$endsWith</code></td><td>Ends with</td></tr><tr><td><code>$endsWithc</code></td><td>Ends with (case-sensitive)</td></tr><tr><td><code>$or</code></td><td>Joins the filters in an &quot;or&quot; expression</td></tr><tr><td><code>$and</code></td><td>Joins the filters in an &quot;and&quot; expression</td></tr></tbody></table><h4 id="simple-filtering" tabindex="-1"><a class="header-anchor" href="#simple-filtering"><span>Simple Filtering</span></a></h4><blockquote><p><strong>Tip</strong> In javascript use <a href="https://www.npmjs.com/package/qs" target="_blank" rel="noopener noreferrer">qs</a> directly to generate complex queries instead of creating them manually. Examples in this documentation showcase how you can use <code>qs</code>.</p></blockquote><p>Find users having &#39;John&#39; as their first name</p><p><code>GET /api/users?filters[name][$eq]=John</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">$eq</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token literal-property property">encodeValuesOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// prettify URL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/users?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Find multiple restaurants with ids 3, 6, 8</p><p><code>GET /api/restaurants?filters[id][$in][0]=3&amp;filters[id][$in][1]=6&amp;filters[id][$in][2]=8</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    $<span class="token keyword">in</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token literal-property property">encodeValuesOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// prettify URL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/restaurants?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="complex-filtering" tabindex="-1"><a class="header-anchor" href="#complex-filtering"><span>Complex Filtering</span></a></h4><p>Complex filtering is combining multiple filters using advanced methods such as combining <code>$and</code> &amp; <code>$or</code>. This allows for more flexibility to request exactly the data needed.</p><p>Find books with 2 possible dates and a specific author.</p><p><code>GET /api/books?filters[$or][0][date][$eq]=2020-01-01&amp;filters[$or][1][date][$eq]=2020-01-02&amp;filters[author][name][$eq]=Kai%20doe</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">$or</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">$eq</span><span class="token operator">:</span> <span class="token string">&#39;2020-01-01&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">$eq</span><span class="token operator">:</span> <span class="token string">&#39;2020-01-02&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">author</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">$eq</span><span class="token operator">:</span> <span class="token string">&#39;Kai doe&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">encodeValuesOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// prettify URL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/books?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="deep-filtering" tabindex="-1"><a class="header-anchor" href="#deep-filtering"><span>Deep Filtering</span></a></h4><p>Deep filtering is filtering on a relation&#39;s fields.</p><p>Find restaurants owned by a chef who belongs to a 5-star restaurant</p><p><code>GET /api/restaurants?filters[chef][restaurants][stars][$eq]=5</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">chef</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">restaurants</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">stars</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">$eq</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">encodeValuesOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// prettify URL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/restaurants?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="apply-sort" tabindex="-1"><a class="header-anchor" href="#apply-sort"><span>Apply Sort</span></a></h3><h4 id="apply-basic-sorting" tabindex="-1"><a class="header-anchor" href="#apply-basic-sorting"><span>Apply Basic Sorting</span></a></h4><p>Queries can accept a sort parameter that allows sorting on one or multiple fields with the following syntax&#39;s:</p><p><code>GET /api/:pluralApiId?sort=value</code> to sort on 1 field</p><p><code>GET /api/:pluralApiId?sort[0]=value1&amp;sort[1]=value2</code> to sort on multiple fields (e.g. on 2 fields)</p><p>The sorting order can be defined as:</p><ul><li><code>:asc</code> for ascending order (default order, can be omitted)</li><li><code>:desc</code> for descending order.</li></ul><p><em>Usage Examples</em></p><p>Sort using 2 fields</p><p><code>GET /api/articles?sort[0]=title&amp;sort[1]=slug</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;slug&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">encodeValuesOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// prettify URL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/articles?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sort using 2 fields and set the order</p><p><code>GET /api/articles?sort[0]=title%3Aasc&amp;sort[1]=slug%3Adesc</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;title:asc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;slug:desc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">encodeValuesOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// prettify URL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/articles?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="apply-sort-by-relationships" tabindex="-1"><a class="header-anchor" href="#apply-sort-by-relationships"><span>Apply Sort by Relationships</span></a></h4><p>All the usages of basic sorting are applicable. Use dot(.) notation to apply relationship in the following format.</p><p><code>?sort=[relationship name].[relationship column]:[sort direction]</code></p><p><em>Usage Examples</em></p><p>The query below sorts posts by their tag name in ascending order (default sort direction). Direction is not mandatory when sorted by ascending order.</p><p><code>GET /api/posts?sort=tags.name:asc</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> query <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;tags.name:asc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">encodeValuesOnly</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// prettify URL</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/posts?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>[!Note] Sorting by nested relationships is not supported by the package as of now.</p></blockquote><h2 id="upgrade-guide" tabindex="-1"><a class="header-anchor" href="#upgrade-guide"><span>Upgrade Guide</span></a></h2><h3 id="version-3" tabindex="-1"><a class="header-anchor" href="#version-3"><span>Version 3</span></a></h3><p>changed how <code>$filterFields</code> array works. it no longer renames fields, instead, it restricts filters that are accepted by the field as mentioned in the <a href="#restrict-filters">Restrict filters</a> section. to rename fields refer to <a href="#rename-fields">Rename fields</a>. <code>sortFields</code> However, didnt change.</p><h3 id="version-2" tabindex="-1"><a class="header-anchor" href="#version-2"><span>Version 2</span></a></h3><p>changed filter function arguments. filter function no longer accepts filter methods, instead, filter function now accepts filter source as mentioned in <a href="#custom-filters">Custom Filters</a> section. to specify allowed filter methods use filterBy as mentioned in <a href="#restrict-filters">Restrict Filters</a></p>`,147);function v(m,g){const n=o("router-link");return c(),i("div",null,[u,s("nav",d,[s("ul",null,[s("li",null,[a(n,{to:"#table-of-contents"},{default:e(()=>[t("Table of Contents")]),_:1})]),s("li",null,[a(n,{to:"#tutorials"},{default:e(()=>[t("Tutorials")]),_:1}),s("ul",null,[s("li",null,[a(n,{to:"#video"},{default:e(()=>[t("Video")]),_:1})]),s("li",null,[a(n,{to:"#articles"},{default:e(()=>[t("Articles")]),_:1})])])]),s("li",null,[a(n,{to:"#installation"},{default:e(()=>[t("Installation")]),_:1})]),s("li",null,[a(n,{to:"#basic-usage"},{default:e(()=>[t("Basic Usage")]),_:1}),s("ul",null,[s("li",null,[a(n,{to:"#filters"},{default:e(()=>[t("Filters")]),_:1})]),s("li",null,[a(n,{to:"#sort"},{default:e(()=>[t("Sort")]),_:1})])])]),s("li",null,[a(n,{to:"#advanced-usage"},{default:e(()=>[t("Advanced Usage")]),_:1}),s("ul",null,[s("li",null,[a(n,{to:"#allowed-fields"},{default:e(()=>[t("Allowed Fields")]),_:1})]),s("li",null,[a(n,{to:"#rename-fields"},{default:e(()=>[t("Rename Fields")]),_:1})]),s("li",null,[a(n,{to:"#restrict-filters"},{default:e(()=>[t("Restrict Filters")]),_:1})]),s("li",null,[a(n,{to:"#restrict-filters-by-field"},{default:e(()=>[t("Restrict filters by field")]),_:1})]),s("li",null,[a(n,{to:"#changing-params-source"},{default:e(()=>[t("Changing Params Source")]),_:1})]),s("li",null,[a(n,{to:"#livewire"},{default:e(()=>[t("Livewire")]),_:1})]),s("li",null,[a(n,{to:"#custom-filters"},{default:e(()=>[t("Custom Filters")]),_:1})]),s("li",null,[a(n,{to:"#silent-exceptions"},{default:e(()=>[t("Silent Exceptions")]),_:1})]),s("li",null,[a(n,{to:"#sort-null-values-last"},{default:e(()=>[t("Sort null values last")]),_:1})])])]),s("li",null,[a(n,{to:"#queries-and-javascript-examples"},{default:e(()=>[t("Queries and javascript examples")]),_:1}),s("ul",null,[s("li",null,[a(n,{to:"#available-filters"},{default:e(()=>[t("Available Filters")]),_:1})]),s("li",null,[a(n,{to:"#apply-sort"},{default:e(()=>[t("Apply Sort")]),_:1})])])]),s("li",null,[a(n,{to:"#upgrade-guide"},{default:e(()=>[t("Upgrade Guide")]),_:1}),s("ul",null,[s("li",null,[a(n,{to:"#version-3"},{default:e(()=>[t("Version 3")]),_:1})]),s("li",null,[a(n,{to:"#version-2"},{default:e(()=>[t("Version 2")]),_:1})])])])])]),k])}const b=l(r,[["render",v],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/","title":"Docs","lang":"en-US","frontmatter":{"title":"Docs"},"headers":[{"level":2,"title":"Table of Contents","slug":"table-of-contents","link":"#table-of-contents","children":[]},{"level":2,"title":"Tutorials","slug":"tutorials","link":"#tutorials","children":[{"level":3,"title":"Video","slug":"video","link":"#video","children":[]},{"level":3,"title":"Articles","slug":"articles","link":"#articles","children":[]}]},{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"Basic Usage","slug":"basic-usage","link":"#basic-usage","children":[{"level":3,"title":"Filters","slug":"filters","link":"#filters","children":[]},{"level":3,"title":"Sort","slug":"sort","link":"#sort","children":[]}]},{"level":2,"title":"Advanced Usage","slug":"advanced-usage","link":"#advanced-usage","children":[{"level":3,"title":"Allowed Fields","slug":"allowed-fields","link":"#allowed-fields","children":[]},{"level":3,"title":"Rename Fields","slug":"rename-fields","link":"#rename-fields","children":[]},{"level":3,"title":"Restrict Filters","slug":"restrict-filters","link":"#restrict-filters","children":[]},{"level":3,"title":"Restrict filters by field","slug":"restrict-filters-by-field","link":"#restrict-filters-by-field","children":[]},{"level":3,"title":"Changing Params Source","slug":"changing-params-source","link":"#changing-params-source","children":[]},{"level":3,"title":"Livewire","slug":"livewire","link":"#livewire","children":[]},{"level":3,"title":"Custom Filters","slug":"custom-filters","link":"#custom-filters","children":[]},{"level":3,"title":"Silent Exceptions","slug":"silent-exceptions","link":"#silent-exceptions","children":[]},{"level":3,"title":"Sort null values last","slug":"sort-null-values-last","link":"#sort-null-values-last","children":[]}]},{"level":2,"title":"Queries and javascript examples","slug":"queries-and-javascript-examples","link":"#queries-and-javascript-examples","children":[{"level":3,"title":"Available Filters","slug":"available-filters","link":"#available-filters","children":[]},{"level":3,"title":"Apply Sort","slug":"apply-sort","link":"#apply-sort","children":[]}]},{"level":2,"title":"Upgrade Guide","slug":"upgrade-guide","link":"#upgrade-guide","children":[{"level":3,"title":"Version 3","slug":"version-3","link":"#version-3","children":[]},{"level":3,"title":"Version 2","slug":"version-2","link":"#version-2","children":[]}]}],"git":{"updatedTime":1717934819000,"contributors":[{"name":"Abbas mkhzomi","email":"amkhzomi@gmail.com","commits":2}]},"filePathRelative":"index.md"}');export{b as comp,f as data};

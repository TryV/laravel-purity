import{_ as i,r as p,c as o,a as s,d as n,e,w as l,b as t,o as c}from"./app-B1I78L6s.js";const r={},d=t(`<h1 id="relation-fields" tabindex="-1"><a class="header-anchor" href="#relation-fields"><span>Relation Fields</span></a></h1><p>In this section, we&#39;re going to talk about how Purity can help you handle relation fields.</p><h2 id="filtering-by-relation" tabindex="-1"><a class="header-anchor" href="#filtering-by-relation"><span>Filtering by Relation</span></a></h2><p>First, you need to define the relation in your model:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Relations<span class="token punctuation">\\</span>HasMany</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Filterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">tags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">HasMany</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token class-name static-context">Tag</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),u=s("code",null,"$filterFields",-1),k=s("code",null,"$filterFields",-1),m=t(`<div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Tags</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Filterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$filterFields</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),v=t(`<h2 id="sorting-by-relation" tabindex="-1"><a class="header-anchor" href="#sorting-by-relation"><span>Sorting by Relation</span></a></h2><p>Purity supports sorting by the following relationship types:</p><ul><li>One to One</li><li>One to Many</li><li>Many to Many</li></ul><p>Just like with filtering, you&#39;ll need to define the return type of the relations in your model:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Relations<span class="token punctuation">\\</span>HasMany</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Sortable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">tags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">HasMany</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token class-name static-context">Tag</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function h(b,y){const a=p("RouteLink");return c(),o("div",null,[d,s("p",null,[n("Note that Purity read available fields from related models, you'll want to edit the "),u,n(" property in the related model. read more about "),k,n(" in "),e(a,{to:"/advanced/allowed.html"},{default:l(()=>[n("allowed fields")]),_:1}),n(" section.")]),m,s("p",null,[n("Now you're all set to apply relation filtering! You can find some examples on the "),e(a,{to:"/js-examples/filter.html#relation-filtering"},{default:l(()=>[n("filter examples page")]),_:1}),n(".")]),v,s("p",null,[n("Check out the "),e(a,{to:"/js-examples/sort.html#apply-sort-by-relationships"},{default:l(()=>[n("sort examples page")]),_:1}),n(" for some examples.")])])}const f=i(r,[["render",h],["__file","relation.html.vue"]]),w=JSON.parse('{"path":"/advanced/relation.html","title":"Relation Fields","lang":"en-US","frontmatter":{"title":"Relation Fields","prev":{"text":"Rename Fields","link":"/advanced/rename"},"next":{"text":"Allowed Fields","link":"/advanced/allowed"}},"headers":[{"level":2,"title":"Filtering by Relation","slug":"filtering-by-relation","link":"#filtering-by-relation","children":[]},{"level":2,"title":"Sorting by Relation","slug":"sorting-by-relation","link":"#sorting-by-relation","children":[]}],"git":{"updatedTime":1718398054000,"contributors":[{"name":"Abbas mkhzomi","email":"amkhzomi@gmail.com","commits":2}]},"filePathRelative":"advanced/relation.md"}');export{f as comp,w as data};
